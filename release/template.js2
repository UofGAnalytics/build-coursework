/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 48:
/***/ (() => {

setHtmlFontSize();
window.addEventListener('resize', setHtmlFontSize, false);
function setHtmlFontSize() {
  const min = 14;
  const max = 30;
  const width = Math.min(window.innerWidth, 1000 * 1.5);
  const fontSize = width / 80;
  const clamped = Math.max(min, Math.min(max, fontSize));
  document.documentElement.style.fontSize = `${clamped}px`;
}

/***/ }),

/***/ 137:
/***/ (() => {

document.querySelectorAll('.answer-trigger').forEach(elem => {
  elem.addEventListener('click', toggleAnswer);
});
function toggleAnswer(e) {
  const target = e.target;
  const id = `answer-${target.dataset.answerId}`;
  const $answer = document.getElementById(id);
  if ($answer.classList.contains('show')) {
    $answer.classList.remove('show');
    target.innerHTML = 'Show answer';
  } else {
    $answer.classList.add('show');
    target.innerHTML = 'Hide answer';
  }
}

/***/ }),

/***/ 567:
/***/ (() => {

document.querySelector('#root > .hamburger-icon')?.addEventListener('click', openSidebar);
document.querySelector('.logo > .hamburger-icon')?.addEventListener('click', closeSidebar);
function openSidebar() {
  const root = document.getElementById('root');
  root.classList.remove('hide-sidebar');
}
function closeSidebar() {
  const root = document.getElementById('root');
  root.classList.add('hide-sidebar');
}

/***/ }),

/***/ 512:
/***/ (() => {

// toggle view options
const button = document.getElementById('view-options-toggle');
button.addEventListener('click', toggleOpen);
let viewOptionsOpen = false;
function toggleOpen() {
  if (viewOptionsOpen) {
    document.documentElement.classList.remove('view-options-open');
    button.innerHTML = 'View options';
    viewOptionsOpen = false;
  } else {
    document.documentElement.classList.add('view-options-open');
    button.innerHTML = 'Table of contents';
    viewOptionsOpen = true;
  }
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXTERNAL MODULE: ./src/html-font-size.ts
var html_font_size = __webpack_require__(48);
// EXTERNAL MODULE: ./src/view-options/toggle.ts
var toggle = __webpack_require__(512);
;// CONCATENATED MODULE: ./src/util.ts
function saveState(name, state) {
  localStorage.setItem(name, JSON.stringify(state));
}
function getSavedState(name, defaultState) {
  const saved = localStorage.getItem(name);
  if (saved === null) {
    return {
      ...defaultState
    };
  }
  const savedState = JSON.parse(saved);
  return Object.entries(defaultState).reduce((acc, tuple) => {
    const key = tuple[0];
    const value = tuple[1];
    acc[key] = savedState[key] || value;
    return acc;
  }, {});
}
;// CONCATENATED MODULE: ./src/view-options/state.ts

const defaultState = Object.freeze({
  theme: 'theme-light',
  font: 'font-default',
  fontSize: '1',
  lineSpacing: '1',
  letterSpacing: '0',
  lineWidth: '1'
});
const state = getSavedState('view-options', defaultState);
;// CONCATENATED MODULE: ./src/view-options/theme.ts


document.documentElement.classList.add(state.theme);
const current = state.theme.replace('theme-', '');
document.querySelector(`#themes .${current}`)?.classList.add('selected');
document.querySelectorAll('#themes li').forEach(elem => {
  elem.addEventListener('click', setTheme);
});
function setTheme(e) {
  const target = e.target;
  const name = `theme-${target.classList[0]}`;
  const themes = target.closest('#themes');
  themes.querySelectorAll('li').forEach(elem => {
    elem.classList.remove('selected');
  });
  target.classList.add('selected');
  document.documentElement.classList.replace(state.theme, name);
  state.theme = name;
  saveState('view-options', state);
}
;// CONCATENATED MODULE: ./src/view-options/font.ts


document.documentElement.classList.add(state.font);
const font_current = state.font.replace('font-', '');
document.querySelector(`#fonts .${font_current}`)?.classList.add('selected');
document.querySelectorAll('#fonts li').forEach(elem => {
  elem.addEventListener('click', setFont);
});
function setFont(e) {
  const target = e.target;
  const name = `font-${target.classList[0]}`;
  const fonts = target.closest('#fonts');
  fonts.querySelectorAll('li').forEach(elem => {
    elem.classList.remove('selected');
  });
  target.classList.add('selected');
  const main = document.querySelector('main');
  main.classList.replace(state.font, name);
  state.font = name;
  saveState('view-options', state);
}
;// CONCATENATED MODULE: ./src/view-options/readability.ts


document.documentElement.style.setProperty('--fontSize', state.fontSize);
document.documentElement.style.setProperty('--lineSpacing', state.lineSpacing);
document.documentElement.style.setProperty('--letterSpacing', state.letterSpacing);
document.documentElement.style.setProperty('--lineWidth', state.lineWidth);
document.querySelectorAll('#readability .btn.minus').forEach(elem => {
  elem.addEventListener('click', handleMinus);
});
document.querySelectorAll('#readability .btn.plus').forEach(elem => {
  elem.addEventListener('click', handlePlus);
});
document.querySelectorAll('#readability .btn.reset').forEach(elem => {
  elem.addEventListener('click', handleReset);
  const {
    currentValue,
    defaultValue
  } = getProps(elem);
  if (currentValue === Number(defaultValue)) {
    elem.classList.add('disabled');
  }
});
function handleMinus(e) {
  const target = e.target;
  if (target.classList.contains('disabled')) {
    return;
  }
  const props = getProps(target);
  const newValue = Math.max(props.min, props.currentValue - props.increment);
  setDisabledClasses(newValue, props);
  const strValue = String(newValue);
  document.documentElement.style.setProperty(`--${props.name}`, strValue);
  state[props.name] = strValue;
  saveState('view-options', state);
}
function handlePlus(e) {
  const target = e.target;
  if (target.classList.contains('disabled')) {
    return;
  }
  const props = getProps(target);
  const newValue = Math.min(props.max, props.currentValue + props.increment);
  setDisabledClasses(newValue, props);
  const strValue = String(newValue);
  document.documentElement.style.setProperty(`--${props.name}`, strValue);
  state[props.name] = strValue;
  saveState('view-options', state);
}
function handleReset(e) {
  const target = e.target;
  if (target.classList.contains('disabled')) {
    return;
  }
  const props = getProps(target);
  setDisabledClasses(Number(props.defaultValue), props);
  target.classList.add('disabled');
  document.documentElement.style.setProperty(`--${props.name}`, props.defaultValue);
  state[props.name] = props.defaultValue;
  saveState('view-options', state);
}
function setDisabledClasses(newValue, props) {
  const tolerance = 0.01;
  if (Math.abs(newValue - props.min) < tolerance) {
    props.minus.classList.add('disabled');
  } else {
    props.minus.classList.remove('disabled');
  }
  if (Math.abs(props.max - newValue) < tolerance) {
    props.plus.classList.add('disabled');
  } else {
    props.plus.classList.remove('disabled');
  }
  if (Math.abs(Number(props.defaultValue) - newValue) < tolerance) {
    props.reset.classList.add('disabled');
  } else {
    props.reset.classList.remove('disabled');
  }
}
function getProps(elem) {
  const li = elem.closest('li');
  const name = li.classList[0];
  return {
    li,
    name,
    plus: li.querySelector('.btn.plus'),
    minus: li.querySelector('.btn.minus'),
    reset: li.querySelector('.btn.reset'),
    min: Number(li.dataset.min),
    max: Number(li.dataset.max),
    increment: Number(li.dataset.increment),
    currentValue: Number(state[name]),
    defaultValue: defaultState[name]
  };
}
;// CONCATENATED MODULE: ./src/view-options/index.ts




// EXTERNAL MODULE: ./src/toggle-answers.ts
var toggle_answers = __webpack_require__(137);
// EXTERNAL MODULE: ./src/toggle-sidebar.ts
var toggle_sidebar = __webpack_require__(567);
;// CONCATENATED MODULE: ./src/program-switcher/state.ts

const state_defaultState = Object.freeze({
  program: 'github-desktop'
});
const state_state = getSavedState('environment', state_defaultState);
;// CONCATENATED MODULE: ./src/program-switcher/index.ts


document.documentElement.classList.add(`program-${state_state.program}`);
document.querySelectorAll('.program-switcher > ul > li').forEach(elem => {
  const element = elem;
  console.log(element.dataset.program, state_state.program);
  if (element.dataset.program === state_state.program) {
    element.classList.add('active');
  }
  element.addEventListener('click', setProgram);
});
document.querySelectorAll('.program-switcher > .program').forEach(elem => {
  const element = elem;
  if (element.dataset.program === state_state.program) {
    element.classList.add('show');
  }
});
function setProgram(e) {
  const target = e.currentTarget;
  const program = target.dataset.program;
  const newClass = `program-${program}`;
  if (!document.documentElement.classList.contains(newClass)) {
    const oldClass = `program-${state_state.program}`;
    document.documentElement.classList.replace(oldClass, newClass);
    state_state.program = program;
    saveState('environment', state_state);
  }
}
;// CONCATENATED MODULE: ./src/language-switcher/state.ts

const language_switcher_state_defaultState = Object.freeze({
  language: 'r'
});
const language_switcher_state_state = getSavedState('environment', language_switcher_state_defaultState);
;// CONCATENATED MODULE: ./src/language-switcher/index.ts


document.documentElement.classList.add(`language-${language_switcher_state_state.language}`);
document.querySelectorAll('.language-switcher > ul > li').forEach(elem => {
  const element = elem;
  console.log(element.dataset.language, language_switcher_state_state.language);
  if (element.dataset.language === language_switcher_state_state.language) {
    element.classList.add('active');
  }
  element.addEventListener('click', setLanguage);
});
document.querySelectorAll('.language-switcher > .language').forEach(elem => {
  const element = elem;
  if (element.dataset.language === language_switcher_state_state.language) {
    element.classList.add('show');
  }
});
function setLanguage(e) {
  const target = e.currentTarget;
  const language = target.dataset.language;
  const newClass = `language-${language}`;
  if (!document.documentElement.classList.contains(newClass)) {
    const oldClass = `language-${language_switcher_state_state.language}`;
    document.documentElement.classList.replace(oldClass, newClass);
    language_switcher_state_state.language = language;
    saveState('environment', language_switcher_state_state);
  }
}
;// CONCATENATED MODULE: ./src/index.ts







document.documentElement.dispatchEvent(new Event('template-ready'));
})();

/******/ })()
;